# Used as inspiration: https://github.com/mvdan/github-actions-golang

name: CI flow

on: push

jobs:
  ci-flow:
    env:
      HOME: /root/actions-runner/_work/
      GOMODCACHE: /root/actions-runner/_work/go/pkg/mod
      GOCACHE: /root/actions-runner/_work/.cache/go-build
    strategy:
      # Default is true, cancels jobs for other platforms in the matrix if one fails
      fail-fast: false
      matrix:
        os: [ linux-runner ]
        go: [ '1.19' ]

        include:
        # Set the minimum Go patch version for the given Go minor
        # Usable via ${{ matrix.GO_SEMVER }}
        - go: '1.19'
          GO_SEMVER: '~1.19.0'

        # Set some variables per OS, usable via ${{ matrix.VAR }}
        # CADDY_BIN_PATH: the path to the compiled Caddy binary, for artifact publishing
        # SUCCESS: the typical value for $? per OS (Windows/pwsh returns 'True')
        - os: linux-runner
          CADDY_BIN_PATH: ./cmd/caddy/caddy
          SUCCESS: 0

    runs-on: ${{ matrix.os }}

    steps:        
    - name: Install Go
      uses: actions/setup-go@v3
      
      with:
        go-version: ${{ matrix.GO_SEMVER }}
        check-latest: true

    - name: Checkout code
      uses: actions/checkout@v3

    # These tools would be useful if we later decide to reinvestigate
    # publishing test/coverage reports to some tool for easier consumption
    # - name: Install test and coverage analysis tools
    #   run: |
    #     go get github.com/axw/gocov/gocov
    #     go get github.com/AlekSi/gocov-xml
    #     go get -u github.com/jstemmer/go-junit-report
    #     echo "::add-path::$(go env GOPATH)/bin"

    - name: Print Go version and environment
      id: vars
      run: |
        printf "Using go at: $(which go)\n"
        printf "Go version: $(go version)\n"
        printf "\n\nGo environment:\n\n"
        go env
        printf "\n\nSystem environment:\n\n"
        env
        printf "Git version: $(git version)\n\n"
        # Calculate the short SHA1 hash of the git commit
        echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

    - name: Cache the build cache
      uses: actions/cache@v2
      with:
        # In order:
        # * Module download cache
        # * Build cache (Linux)
        # * Build cache (Mac)
        # * Build cache (Windows)
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          ~\AppData\Local\go-build
        key: ${{ runner.os }}-${{ matrix.go }}-go-ci-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.go }}-go-ci

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        # mkdir test-results

    - name: Build Caddy
      working-directory: ./cmd/caddy
      env:
        CGO_ENABLED: 0
      run: |
        go build -trimpath -ldflags="-w -s" -v

    - name: Scan with Fortify
      working-directory: ./cmd/caddy
      env:
        CGO_ENABLED: 0
      run: |
        export PATH=/opt/Fortify/Fortify_SCA_and_Apps_22.1.1/bin:$PATH
        sourceanalyzer -b caddy -clean
        sourceanalyzer -b caddy touchless go build -trimpath -ldflags="-w -s" -v
        sourceanalyzer -Xmx14296M -Xms400M -Xss24M -b caddy -scan -f Fortifycaddy.fpr
        fortifyclient -url https://dc.sca.local:8443/ssc -authtoken 48ade8b4-f55d-4578-a3c1-43e47b211e2b uploadFPR -file Fortifycaddy.fpr -application "Caddy" -applicationVersion "1.0"

    - name: Publish Build Artifact
      uses: actions/upload-artifact@v1
      with:
        name: caddy_${{ runner.os }}_go${{ matrix.go }}_${{ steps.vars.outputs.short_sha }}
        path: ${{ matrix.CADDY_BIN_PATH }}

    # Commented bits below were useful to allow the job to continue
    # even if the tests fail, so we can publish the report separately
    # For info about set-output, see https://stackoverflow.com/questions/57850553/github-actions-check-steps-status
    - name: Run tests
      # id: step_test
      # continue-on-error: true
      run: |
        # (go test -v -coverprofile=cover-profile.out -race ./... 2>&1) > test-results/test-result.out
        go test -v -coverprofile="cover-profile.out" -short -race ./...
        # echo "::set-output name=status::$?"

    # Relevant step if we reinvestigate publishing test/coverage reports
    # - name: Prepare coverage reports
    #   run: |
    #     mkdir coverage
    #     gocov convert cover-profile.out > coverage/coverage.json
    #     # Because Windows doesn't work with input redirection like *nix, but output redirection works.
    #     (cat ./coverage/coverage.json | gocov-xml) > coverage/coverage.xml

    # To return the correct result even though we set 'continue-on-error: true'
    # - name: Coerce correct build result
    #   if: matrix.os != 'windows-latest' && steps.step_test.outputs.status != ${{ matrix.SUCCESS }}
    #   run: |
    #     echo "step_test ${{ steps.step_test.outputs.status }}\n"
    #     exit 1
